--- 
title: "\"Sometimes you need more than one programming language\""
layout: post
---
Someone had said the above statement to me today and it stuck in my mind for some reason. I was thinking about it tonight and something occurred to me.

I've heard a bunch of variations on this statement before today as I'm sure we all have. Often, when I hear this statement its coming from people who would like to be able (or allowed) to use Ruby in their work projects. These places are invariably ones in which Java is the primary language and any others are either frowned upon or outright barred. The management at these places, either technical or not, typically characterize this decision as smart given the large market for engineers that know Java, the availability of quality libraries for many purposes and the inherent generality of the language. All of these are certainly true and are pretty good business reasons to use Java.

These arguments ignore the ease of use of Ruby and the speed of development one can achieve with it. They are also a form of premature optimization, as well, although in this case of business interests, not source code. Most of these shops are doing 3-tier Web applications and, as such, they are missing out if they skip over Rails because it doesn't run on Java. (it does, but whatever)

However, it was the statement that really hit. People saying that are indicating that different languages have different strengths. Even though Java now has regular expression capabilities, you'd still want to use Perl or Ruby for a big text processing job given how many built-in facilities those languages have for that task. You'd want to use [Erlang](http://www.erlang.org/) for very-long-lived server applications over Java because it was tailor-made for that purpose and Java was not. All of these points lend themselves towards a heterogeneous language environment, using a language for what its good for and not for what its not.

I wonder, though: when people tell me this, they are usually rationalizing the use of Ruby with this statement. Not "rationalizing" in that they shouldn't be using Ruby, but rather they are seeking to get leverage for Ruby so that it might one day be in the position that Java is now. I can certainly sympathize with this; Ruby is a sweet language. Alas, you can't get there from here today, though. The main Ruby interpreter has major problems with memory and stability and its successors are [still](http://xruby.com/default.aspx) [in](http://www.ironruby.net/) [their](http://jruby.codehaus.org/) [nascent](http://rubini.us/) stages. The runtime situation is just not that good so you can't drop Java for everything yet if you need speed/low-memory in places.

How many of the people who have said this, though, would then reverse their position and advocate for Ruby being the only language for "maintainability" or "ease of introduction to the junior guys" reasons once a strong Ruby VM was available? And how many people said the same thing in reference to Java when C and C++ were king? It seems to me that these language trends are cyclical. The new hotness challenges the old-and-busted and eventually wins, only to become the new old-and-busted.

The irony here is that the statement is true in an absolute sense. One should use languages for the things they are good for and find different ones for things they are not. To not do so is to arbitrarily shorten not only your toolset but your very range of thought. (big up, [Sapir-Whorf](http://en.wikipedia.org/wiki/Sapir-Whorf_hypothesis)) Attempting to use one language for all your programming needs leads to ridiculous situations like the [Kingdom of Nouns](http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html) phenomenon. The other strangeness with this statement is that the people who say it generally never mention the really out-there languages like [Lisp](http://en.wikipedia.org/wiki/Common_Lisp), [Ocaml](http://caml.inria.fr/ocaml/), [Prolog](http://en.wikipedia.org/wiki/Prolog) or [Smalltalk](http://www.smalltalk.org/) that are orders of magnitude better at certain things than more mainstream languages. Personally, I just hope people remember the irony when 10 years have passed and all new development at JPMorgan is in Ruby running on a [Gemstone](http://www.gemstone.com/)-derived VM.
