--- 
title: Definitive Proof of the Blub Paradox...
layout: post
---
...[has arrived](http://lkesteloot.blogspot.com/2008/01/production-languages-and-toy-languages.html) in the form of a blog post by one Lawrence Kesteloot. In this post, he attempts to show that languages are distinguished as either "production" or "toy" languages (troll terms if I've ever heard them) and then proceeds to slam [SICP](http://mitpress.mit.edu/sicp/) and Lisp and generally anything he doesn't understand.

My biggest problem with this article is not the fact that someone with a masters degree in computer science doesn't know what a fixed point is, but rather the fact that it nearly proves the [Blub paradox](http://www.paulgraham.com/avg.html) to be true all by itself. Clearly, this author has become "institutionalized" in the Java mindset and construes brevity of expression with inscrutability. He maligns powerful languages features and elegance in favor of "understandability" by the average programmer and then implicitly marks himself as such by misconstruing boilerplate code that an IDE generates for him with readability. Ever read the code generated by Axis? No... why would you? That's the least readable Java can be, in my estimation, but the point is that I don't have to read it. Lisp excels at that kind of code generation task. The author seems to believe that thinking about the code you're working with is a bad thing and that if it takes any effort at all to understand it must be bad. This thing we're in is an art, people, not a science.

The speculation about Yahoo!'s rewrite of Viaweb also does not help his case. Yahoo! trucks in average programmers galore. Surely, there are many good and great ones there, too, just not in as great a number. As such, its not unbelievable that they could not find Lisp programmers: you typically have to be looking for something before you find it. Also, why would a Lisp guy want to work at Yahoo!? The [coolest project they have going right now](http://lucene.apache.org/hadoop) is written in Java. The kind of guy who hacks Lisp is unlikely to be pining for a job at Microsoft or IBM or even Yahoo! these days, nes pas? I do know some excellent "production" people (around Philly, even) that hack on Lisp and Scheme in production, but they appear to be the exception rather than the rule. Finally, I'm assuming that the author has never heard the fact that lots of the big financials choose a very high-level functional language when they need to make sure their systems are right. I bet this is partially so they can attract the very best people to those positions, as well.

I suppose the author might have also taken Amazon's choice to dump Lisp as a sign that Lisp is not production. (assuming he was aware that it was, in fact, originally built in Lisp and C) I, instead, would take that as an indication that Amazon outgrew the ability to employ only the best people they could find. Business growth has a way of doing that to you. The distribution of talent and passion appear to be two somewhat uncorrelated power law curves and finding people at the top of both curves simultaneously is a task that will make anyone's hair fall out and liver get harder. Plus, there are many business realities that make Blub languages more attractive for any number of reasons: talent pool, employee turnover, ramp-up time mitigation, cultural integration, etc. I write this article after having just dumped Ruby on Rails in favor of Java at my startup for some of these very reasons.

To this author I would only say that a language does not make something "production". People do. Throw [Alan Cox](http://en.wikipedia.org/wiki/Alan_Cox), [Ingo Molnar](http://en.wikipedia.org/wiki/Ingo_Molnar) and [Guy Steele](http://research.sun.com/people/mybio.php?uid=25706) in a room and I bet they could write a better mousetrap in [Brainf*ck](http://www.muppetlabs.com/~breadbox/bf/) if they were excited enough about it. Its never about the language. Its about the people. Full stop.
